//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Addresses = newAddressesTable("public", "addresses", "")

type addressesTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnString
	AddressLine1 postgres.ColumnString
	AddressLine2 postgres.ColumnString
	TownOrCity   postgres.ColumnString
	Country      postgres.ColumnString
	Postcode     postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AddressesTable struct {
	addressesTable

	EXCLUDED addressesTable
}

// AS creates new AddressesTable with assigned alias
func (a AddressesTable) AS(alias string) *AddressesTable {
	return newAddressesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AddressesTable with assigned schema name
func (a AddressesTable) FromSchema(schemaName string) *AddressesTable {
	return newAddressesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AddressesTable with assigned table prefix
func (a AddressesTable) WithPrefix(prefix string) *AddressesTable {
	return newAddressesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AddressesTable with assigned table suffix
func (a AddressesTable) WithSuffix(suffix string) *AddressesTable {
	return newAddressesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAddressesTable(schemaName, tableName, alias string) *AddressesTable {
	return &AddressesTable{
		addressesTable: newAddressesTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newAddressesTableImpl("", "excluded", ""),
	}
}

func newAddressesTableImpl(schemaName, tableName, alias string) addressesTable {
	var (
		IDColumn           = postgres.StringColumn("id")
		AddressLine1Column = postgres.StringColumn("address_line_1")
		AddressLine2Column = postgres.StringColumn("address_line_2")
		TownOrCityColumn   = postgres.StringColumn("town_or_city")
		CountryColumn      = postgres.StringColumn("country")
		PostcodeColumn     = postgres.StringColumn("postcode")
		allColumns         = postgres.ColumnList{IDColumn, AddressLine1Column, AddressLine2Column, TownOrCityColumn, CountryColumn, PostcodeColumn}
		mutableColumns     = postgres.ColumnList{AddressLine1Column, AddressLine2Column, TownOrCityColumn, CountryColumn, PostcodeColumn}
	)

	return addressesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		AddressLine1: AddressLine1Column,
		AddressLine2: AddressLine2Column,
		TownOrCity:   TownOrCityColumn,
		Country:      CountryColumn,
		Postcode:     PostcodeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
