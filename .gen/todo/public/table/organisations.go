//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Organisations = newOrganisationsTable("public", "organisations", "")

type organisationsTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnString
	Name      postgres.ColumnString
	AddressID postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type OrganisationsTable struct {
	organisationsTable

	EXCLUDED organisationsTable
}

// AS creates new OrganisationsTable with assigned alias
func (a OrganisationsTable) AS(alias string) *OrganisationsTable {
	return newOrganisationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new OrganisationsTable with assigned schema name
func (a OrganisationsTable) FromSchema(schemaName string) *OrganisationsTable {
	return newOrganisationsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new OrganisationsTable with assigned table prefix
func (a OrganisationsTable) WithPrefix(prefix string) *OrganisationsTable {
	return newOrganisationsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new OrganisationsTable with assigned table suffix
func (a OrganisationsTable) WithSuffix(suffix string) *OrganisationsTable {
	return newOrganisationsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newOrganisationsTable(schemaName, tableName, alias string) *OrganisationsTable {
	return &OrganisationsTable{
		organisationsTable: newOrganisationsTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newOrganisationsTableImpl("", "excluded", ""),
	}
}

func newOrganisationsTableImpl(schemaName, tableName, alias string) organisationsTable {
	var (
		IDColumn        = postgres.StringColumn("id")
		NameColumn      = postgres.StringColumn("name")
		AddressIDColumn = postgres.StringColumn("address_id")
		allColumns      = postgres.ColumnList{IDColumn, NameColumn, AddressIDColumn}
		mutableColumns  = postgres.ColumnList{NameColumn, AddressIDColumn}
	)

	return organisationsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		Name:      NameColumn,
		AddressID: AddressIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
