//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Contacts = newContactsTable("public", "contacts", "")

type contactsTable struct {
	postgres.Table

	// Columns
	ID             postgres.ColumnString
	FirstName      postgres.ColumnString
	LastName       postgres.ColumnString
	Email          postgres.ColumnString
	OrganisationID postgres.ColumnString
	AddressID      postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ContactsTable struct {
	contactsTable

	EXCLUDED contactsTable
}

// AS creates new ContactsTable with assigned alias
func (a ContactsTable) AS(alias string) *ContactsTable {
	return newContactsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ContactsTable with assigned schema name
func (a ContactsTable) FromSchema(schemaName string) *ContactsTable {
	return newContactsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ContactsTable with assigned table prefix
func (a ContactsTable) WithPrefix(prefix string) *ContactsTable {
	return newContactsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ContactsTable with assigned table suffix
func (a ContactsTable) WithSuffix(suffix string) *ContactsTable {
	return newContactsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newContactsTable(schemaName, tableName, alias string) *ContactsTable {
	return &ContactsTable{
		contactsTable: newContactsTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newContactsTableImpl("", "excluded", ""),
	}
}

func newContactsTableImpl(schemaName, tableName, alias string) contactsTable {
	var (
		IDColumn             = postgres.StringColumn("id")
		FirstNameColumn      = postgres.StringColumn("first_name")
		LastNameColumn       = postgres.StringColumn("last_name")
		EmailColumn          = postgres.StringColumn("email")
		OrganisationIDColumn = postgres.StringColumn("organisation_id")
		AddressIDColumn      = postgres.StringColumn("address_id")
		allColumns           = postgres.ColumnList{IDColumn, FirstNameColumn, LastNameColumn, EmailColumn, OrganisationIDColumn, AddressIDColumn}
		mutableColumns       = postgres.ColumnList{FirstNameColumn, LastNameColumn, EmailColumn, OrganisationIDColumn, AddressIDColumn}
	)

	return contactsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		FirstName:      FirstNameColumn,
		LastName:       LastNameColumn,
		Email:          EmailColumn,
		OrganisationID: OrganisationIDColumn,
		AddressID:      AddressIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
